name: Convert Draw.io Files with Auto-ID

on:
  push:
    paths:
      - '**/*.drawio'
      - 'drawio_files/**'
  workflow_dispatch: # Enable manual triggering
    inputs:
      convert_all:
        description: 'Convert all diagrams (not just changed ones)'
        required: false
        default: 'false'
        type: choice
        options:
          - 'true'
          - 'false'

# Add concurrency control to prevent queued workflows and resolve XKEYBOARD issues
concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}-${{ github.sha }}
  cancel-in-progress: false

# Add permissions needed for the workflow
permissions:
  contents: write

jobs:
  convert:
    runs-on: ubuntu-latest

    steps:
      # Step 1: Check out the repository
      - name: Check out the repository
        uses: actions/checkout@v3
        with:
          fetch-depth: 0 # Fetch all history to detect changes
          
      # Step 2: Install dependencies
      - name: Install Draw.io and dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y wget unzip xvfb libgbm1 libnspr4 libnss3 libxss1 libasound2
          wget https://github.com/jgraph/drawio-desktop/releases/download/v26.2.2/drawio-amd64-26.2.2.deb
          sudo apt-get -f install -y
          sudo dpkg -i drawio-amd64-26.2.2.deb || sudo apt-get -f install -y
          
      # Step 3: Create output directories
      - name: Create output folders
        run: |
          mkdir -p svg_files html_files
          
          # Initialize CSV changelog with headers if it doesn't exist
          if [ ! -f "html_files/CHANGELOG.csv" ]; then
            echo "Date,Time,Diagram,Commit" > html_files/CHANGELOG.csv
          fi

      # Step 4: Find modified Draw.io files
      - name: Find modified Draw.io files
        id: changes
        run: |
          if [[ "${{ github.event_name }}" == "workflow_dispatch" && "${{ github.event.inputs.convert_all }}" == "true" ]]; then
            echo "Using all Draw.io files"
            find drawio_files -name "*.drawio" > /tmp/changed_files.txt
            echo "all_files=true" >> $GITHUB_OUTPUT
            echo "has_changes=true" >> $GITHUB_OUTPUT
          else
            echo "Finding changed Draw.io files"
            git diff --name-only ${{ github.event.before }} ${{ github.event.after }} | grep "\.drawio$" > /tmp/changed_files.txt || true
            
            # Check if there are changes
            if [ -s /tmp/changed_files.txt ]; then
              echo "Changed Draw.io files found:"
              cat /tmp/changed_files.txt
              echo "all_files=false" >> $GITHUB_OUTPUT
              echo "has_changes=true" >> $GITHUB_OUTPUT
            else
              echo "No changed Draw.io files"
              echo "all_files=false" >> $GITHUB_OUTPUT
              echo "has_changes=false" >> $GITHUB_OUTPUT
            fi
          fi
          
      # Step 5: Convert .drawio files and assign simple sequential IDs
      - name: Convert and Auto-assign IDs to Draw.io files
        if: steps.changes.outputs.has_changes == 'true'
        run: |
          echo "Converting Draw.io files and adding auto-IDs..."
          # Make sure our scripts are executable
          chmod +x ./scripts/convert_and_auto_id.sh ./scripts/ultra_simple_id.sh
          
          # First assign IDs to all changed files
          echo "Assigning simple IDs to changed Draw.io files..."
          while IFS= read -r file; do
            if [ -f "$file" ]; then
              echo "Processing $file for ID assignment..."
              ./scripts/ultra_simple_id.sh "$file"
            fi
          done < /tmp/changed_files.txt
          
          # Now run the conversion with proper arguments
          if [[ "${{ steps.changes.outputs.all_files }}" == "true" ]]; then
            # Process all diagrams
            ./scripts/convert_and_auto_id.sh --all
          else
            # Process only changed diagrams
            ./scripts/convert_and_auto_id.sh --file-list /tmp/changed_files.txt
          fi
          
          # Commit all the changes
          git config --local user.name "github-actions[bot]"
          git config --local user.email "github-actions[bot]@users.noreply.github.com"
          git add drawio_files/* svg_files/* html_files/* 2>/dev/null || true
          git commit -m "Assigned IDs to diagrams and converted to SVG/HTML" || echo "No changes to commit"
          
      # Step 6: Commit and push changes
      - name: Commit and push changes
        if: steps.changes.outputs.has_changes == 'true'
        run: |
          # Check if we have any changes to commit
          if git status --porcelain | grep -q .; then
            echo "Committing changes..."
                echo '<!DOCTYPE html>
          <html lang="en">
          <head>
            <meta charset="UTF-8">
            <title>'"$base"'</title>
            <style>
              body { margin: 0; padding: 0; }
              svg { max-width: 100%; height: auto; display: block; }
            git add svg_files/ html_files/ drawio_files/ 
            git commit -m "Auto convert and ID assignment for Draw.io diagrams [skip ci]" || echo "No changes to commit"
            
            # Get current branch name
            BRANCH_NAME=${GITHUB_REF#refs/heads/}
            
            # Fetch latest changes
            echo "Fetching latest changes from remote..."
            git fetch origin $BRANCH_NAME
            
            # Try to rebase our changes
            echo "Rebasing local changes on top of remote changes..."
            if git rebase origin/$BRANCH_NAME; then
              echo "Rebase successful, pushing changes..."
              git push "https://x-access-token:${{ github.token }}@github.com/${{ github.repository }}.git" $BRANCH_NAME
            else
              echo "Rebase had conflicts. Using alternative merge strategy..."
              git rebase --abort
              
              # Pull with --no-rebase to create a merge commit
              git fetch origin $BRANCH_NAME
              
              # First stash our changes to preserve them
              git add svg_files/ html_files/ drawio_files/
              git stash
              
              # Checkout and pull the latest changes
              git checkout $BRANCH_NAME
              git pull origin $BRANCH_NAME
              
              # Apply our stashed changes
              git stash pop
              
              # Handle potential conflicts, especially in CHANGELOG.csv
              if git status | grep -q "Unmerged paths"; then
                echo "Merge conflicts detected, attempting to resolve automatically..."
                
                # Generate diagnostic information for debugging
                echo "--- Git Status ---"
                git status
                echo "--- List of unmerged files ---"
                git diff --name-only --diff-filter=U
                echo "--------------------"
                
                # Handle CHANGELOG.csv specially if it's conflicted
                if git status | grep -q "html_files/CHANGELOG.csv"; then
                  echo "Resolving CHANGELOG.csv conflict..."
                  
                  # More robust approach to handle CSV conflicts
                  # Get the original header 
                  HEADER=$(grep "^Date,Time" html_files/CHANGELOG.csv || echo "Date,Time,User,Diagram,Action,File,Commit Message,Version,Commit Hash,ID")
                  
                  # Save header as first line
                  echo "$HEADER" > html_files/CHANGELOG.csv.resolved
                  
                  # Extract all entries that are not conflict markers and not the header
                  cat html_files/CHANGELOG.csv | grep -v "^<<<<<<< " | grep -v "^=======$" | grep -v "^>>>>>>> " | grep -v "^Date,Time" | sort | uniq >> html_files/CHANGELOG.csv.resolved
                  
                  # Replace conflicted file with resolved version
                  mv html_files/CHANGELOG.csv.resolved html_files/CHANGELOG.csv
                  
                  # Mark as resolved
                  git add html_files/CHANGELOG.csv
                  echo "CHANGELOG.csv conflict resolved automatically"
                fi
                
                # Handle other conflicts
                UNMERGED_FILES=$(git diff --name-only --diff-filter=U | grep -v "html_files/CHANGELOG.csv" || echo "")
                if [ -n "$UNMERGED_FILES" ]; then
                  echo "Resolving conflicts in other files..."
                  echo "$UNMERGED_FILES" | while read -r file; do
                    echo "Resolving conflict in: $file"
                    # For files other than CHANGELOG.csv, we'll keep our changes
                    git checkout --ours "$file" 
                    git add "$file"
                  done
                  echo "Other conflicts resolved"
                fi
              fi
              
              # Re-apply our changes
              git add svg_files/ html_files/ drawio_files/
              git commit -m "Auto convert and ID assignment for Draw.io diagrams (merge commit) [skip ci]"
              git push "https://x-access-token:${{ github.token }}@github.com/${{ github.repository }}.git" $BRANCH_NAME
            fi
          else
            echo "No changes to commit"
          fi

# End of workflow - our files have been converted and committed
