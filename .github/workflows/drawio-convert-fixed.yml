name: Convert Draw.io files to SVG and HTML

on:
  push:
    branches: [main]
    paths:
      - 'drawio_files/**/*.drawio'
      - '.github/workflows/drawio-convert.yml'
  workflow_dispatch:

jobs:
  convert-diagrams:
    name: Convert diagrams
    runs-on: ubuntu-latest
    permissions:
      # Allow the action to commit to the repository
      contents: write

    steps:
      - name: Checkout Repository
        uses: actions/checkout@v3
        with:
          fetch-depth: 0 # Full clone for better conflict resolution
          
      - name: Set up Git User
        run: |
          git config --global user.name "GitHub Action"
          git config --global user.email "action@github.com"
          
      - name: Extract changed .drawio files
        run: |
          echo "Extracting changed .drawio files from commit..."
          
          # Log the ref info for debugging
          echo "GitHub ref: ${{ github.ref }}"
          echo "GitHub ref name: ${{ github.ref_name }}"
          
          # Get list of all changed files
          # Note: Using git diff from the previous commit to HEAD
          git diff --name-only HEAD^ HEAD > /tmp/all_changed_files.txt
          
          # Filter for only .drawio files
          grep "\.drawio$" /tmp/all_changed_files.txt > /tmp/changed_files.txt || true
          
          # Check if we have any .drawio files that changed
          if [ ! -s /tmp/changed_files.txt ]; then
            echo "No .drawio files changed in this commit, attempting to get from workflow dispatch context..."
            
            # Alternative: Get all .drawio files
            find drawio_files -name "*.drawio" > /tmp/changed_files.txt || true
            
            # If still empty, check other mechanisms
            if [ ! -s /tmp/changed_files.txt ]; then
              echo "Still no .drawio files found, using fallback mechanism..."
              
              # Fallback: Direct listing
              ls -1 drawio_files/*.drawio > /tmp/changed_files.txt 2>/dev/null || true
            fi
          fi
          
          # Check if we have any .drawio files to process
          if [ ! -s /tmp/changed_files.txt ]; then
            echo "No .drawio files found to process."
            echo "SKIP_PROCESSING=true" >> $GITHUB_ENV
            exit 0
          fi
          
          # Log the files we'll process
          echo "Files to process:"
          cat /tmp/changed_files.txt
          
          # Keep track of filenames with spaces for special handling
          for file in $(cat /tmp/changed_files.txt); do
            if [[ "$file" == *" "* ]]; then
              echo "Found filename with spaces: $file"
              echo "$file" >> /tmp/files_with_spaces.txt || true
            fi
          done
          
          # Set environment variable to indicate we should proceed
          echo "SKIP_PROCESSING=false" >> $GITHUB_ENV
        shell: bash

      - name: Set up Node.js
        if: env.SKIP_PROCESSING != 'true'
        uses: actions/setup-node@v3
        with:
          node-version: '16'
          
      - name: Set up Display
        if: env.SKIP_PROCESSING != 'true'
        run: |
          # Set up a virtual display for headless draw.io
          sudo apt-get update
          sudo apt-get install -y xvfb
          
          # Start Xvfb
          Xvfb :99 -screen 0 1280x1024x24 -nolisten tcp -nolisten unix &
          export DISPLAY=:99
          
          # Verify display is working
          echo "DISPLAY=$DISPLAY"
          
          # Install dependencies for electron
          # Handle different package names across Ubuntu versions
          if grep -q "noble" /etc/os-release; then
            echo "Detected Ubuntu Noble (24.04), using libasound2t64 package"
            sudo apt-get install -y libxshmfence1 libgbm1 libasound2t64
          else
            echo "Using standard audio package for earlier Ubuntu versions"
            sudo apt-get install -y libxshmfence1 libgbm1 libasound2
          fi
          
          # Add some debug info
          echo "Node version: $(node --version)"
          echo "NPM version: $(npm --version)"
          
      - name: Install draw.io CLI
        if: env.SKIP_PROCESSING != 'true'
        run: |
          # Install draw.io-cli
          npm install -g draw.io-cli
          
          # Verify installation
          draw.io-cli --version
          
      - name: Check and setup export directories
        if: env.SKIP_PROCESSING != 'true'
        run: |
          # Create svg_files directory if it doesn't exist
          mkdir -p svg_files
          
          # Create html_files directory if it doesn't exist
          mkdir -p html_files
          
          # Create drawio_files directory if it doesn't exist (safeguard)
          mkdir -p drawio_files
          
          # Check permissions
          ls -la

      - name: Process Changed Files
        if: env.SKIP_PROCESSING != 'true'
        run: |
          # Get environment details for debugging
          echo "DRAWIO_CLI_VERBOSE=1" >> $GITHUB_ENV
          echo "Node version: $(node --version)"
          echo "NPM version: $(npm --version)"
          echo "draw.io-cli version: $(draw.io-cli --version 2>&1 || echo 'Not available')"
          echo "DISPLAY: $DISPLAY"
          
          # Function to convert a single file
          convert_file() {
            local file_to_process="$1"
            local file_size=$(wc -c < "$file_to_process" 2>/dev/null || echo 0)
            
            echo "Processing: $file_to_process (Size: $file_size bytes)"
            
            # Skip empty or non-existent files
            if [ ! -f "$file_to_process" ] || [ "$file_size" -eq 0 ]; then
              echo "File does not exist or is empty: $file_to_process"
              return 1
            fi
            
            # Debug for very small files
            if [ "$file_size" -lt 1000 ]; then
              echo "NOTE: $file_to_process is very small ($file_size bytes). This is normal for a new empty diagram."
            fi
            
            # Check if this file was actually changed in the current commit
            local was_changed=false
            
            # Method 1: Check changed files list
            grep -q "^$file_to_process\$" /tmp/changed_files.txt && was_changed=true
            
            # Method 2: Direct git diff check (backup if grep fails due to special chars)
            if [ "$was_changed" = false ]; then
              git diff --name-only HEAD^ HEAD 2>/dev/null | grep -q "^$file_to_process\$" && was_changed=true
            fi
            
            # Special case for first commit or files specifically targeted
            if [ ! -s /tmp/changed_files.txt ] || grep -q "^$file_to_process\$" /tmp/files_with_spaces.txt; then
              was_changed=true
            fi
            
            if [ "$was_changed" = false ]; then
              echo "File $file_to_process was not changed in this commit, skipping."
              return 2
            fi
            
            echo "Confirmed $file_to_process was changed in this commit. Processing..."
            
            # Get the base filename without extension, preserving spaces
            local base_name=$(basename "$file_to_process" .drawio)
            echo "Base name: $base_name"
            
            # Create output directories if they don't exist
            mkdir -p "svg_files" "html_files"
            local output_svg="svg_files/${base_name}.svg"
            
            # Check if this is likely a new empty diagram - use more relaxed criteria
            local is_new_empty_diagram=false
            if [ "$file_size" -lt 1000 ]; then
              # First case: Very small file that's definitely a new diagram
              if [ "$file_size" -lt 500 ] && ! grep -q "<mxCell.*value=" "$file_to_process"; then
                echo "This appears to be a new empty diagram (very small size). Will use special handling."
                is_new_empty_diagram=true
              # Second case: Small file that might be empty but has slightly more data
              elif [ "$file_size" -lt 1000 ] && ! grep -q "<mxCell.*value=" "$file_to_process"; then
                echo "This appears to be a possibly empty diagram (small size). Will use special handling."
                is_new_empty_diagram=true
              else
                echo "Small file but contains diagram elements."
              fi
            fi
            
            # Convert to SVG - Use xvfb-run as we're in a headless environment
            echo "Converting to SVG: $file_to_process -> $output_svg"
            
            # Try up to 3 times for conversion
            local max_attempts=3
            local attempt=1
            local conversion_success=false
            
            while [ $attempt -le $max_attempts ] && [ "$conversion_success" = false ]; do
              echo "Conversion attempt $attempt of $max_attempts..."
              
              # Add extra timeout for larger files
              local timeout_seconds=60
              if [ "$file_size" -gt 1000000 ]; then  # 1MB+
                timeout_seconds=180
                echo "Large file detected, using extended timeout of $timeout_seconds seconds"
              elif [ "$file_size" -gt 500000 ]; then  # 500KB+
                timeout_seconds=120
                echo "Medium-large file detected, using extended timeout of $timeout_seconds seconds"
              fi
              
              # Special case for very small files that might be empty diagrams
              if [ "$is_new_empty_diagram" = true ]; then
                # For empty/new diagrams, create a simple SVG directly
                echo "Creating placeholder SVG for empty/new diagram"
                echo '<?xml version="1.0" encoding="UTF-8"?>
                <!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd">
                <svg xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" width="100%" height="100%" viewBox="-4 -4 8 8">
                  <rect x="-3" y="-3" width="6" height="6" fill="white" stroke="#cccccc" stroke-width="0.1"/>
                  <text x="0" y="0.5" font-family="Arial" font-size="1" text-anchor="middle">Empty Diagram</text>
                </svg>' > "$output_svg"
                conversion_success=true
                break
              fi
              
              # For normal files, use draw.io-cli to convert
              # Note: Using xvfb-run with a specific display number, and increasing timeout
              if timeout $timeout_seconds xvfb-run --server-args="-screen 0 1280x1024x24 -dpi 96" draw.io-cli --export --format svg --output "$output_svg" "$file_to_process"; then
                echo "SVG conversion successful on attempt $attempt!"
                conversion_success=true
                break
              else
                echo "SVG conversion failed on attempt $attempt with exit code $?"
                attempt=$((attempt + 1))
                sleep 3  # Brief delay before retry
              fi
            done
            
            # If all attempts failed, exit with error
            if [ "$conversion_success" = false ]; then
              echo "Failed to convert to SVG after $max_attempts attempts. Skipping this file."
              # Still proceed with HTML to see if that works
            else
              echo "SVG output saved to $output_svg"
            fi
            
            # Export to HTML - for interactive viewing
            local output_html="html_files/${base_name}.html"
            echo "Converting to HTML: $file_to_process -> $output_html"
            
            # Special case for empty diagrams
            if [ "$is_new_empty_diagram" = true ]; then
              # Create a simple HTML file for empty diagrams
              echo "Creating placeholder HTML for empty/new diagram"
              echo '<!DOCTYPE html>
              <html>
              <head>
                <title>Empty Diagram</title>
                <style>
                  body { font-family: Arial, sans-serif; margin: 20px; }
                  .empty-notice { 
                    width: 400px; height: 300px; 
                    border: 1px solid #cccccc; 
                    display: flex; align-items: center; justify-content: center;
                    color: #666666;
                  }
                </style>
              </head>
              <body>
                <h1>Empty Diagram</h1>
                <div class="empty-notice">This appears to be an empty or new diagram</div>
              </body>
              </html>' > "$output_html"
              echo "Created HTML placeholder for empty diagram."
            else
              # For normal files, try to convert to HTML
              # Use a smaller timeout for HTML export as it's usually faster
              if timeout 60 xvfb-run --server-args="-screen 0 1280x1024x24 -dpi 96" draw.io-cli --export --format html --output "$output_html" "$file_to_process"; then
                echo "Successfully converted to HTML: $output_html"
              else
                echo "HTML conversion failed with exit code $?"
                # Create a simple HTML that embeds the SVG as fallback
                if [ -f "$output_svg" ]; then
                  echo "Creating fallback HTML that embeds the SVG..."
                  echo "<!DOCTYPE html>
                  <html>
                  <head>
                    <title>$base_name</title>
                    <style>
                      body { margin: 0; overflow: hidden; }
                      svg { width: 100%; height: 100vh; }
                    </style>
                  </head>
                  <body>
                    <object data=\"../svg_files/${base_name}.svg\" type=\"image/svg+xml\" style=\"width:100%; height:100vh;\">
                      Your browser does not support SVG
                    </object>
                  </body>
                  </html>" > "$output_html"
                  echo "Created fallback HTML that embeds the SVG."
                else
                  echo "Both SVG and HTML conversion failed. Cannot create fallback HTML."
                  return 1
                fi
              fi
            fi
            
            # Output success message
            echo "✓ Processed $file_to_process successfully!"
            return 0
          }
          
          # Process each file in the list
          echo "Processing files..."
          cat /tmp/changed_files.txt | while IFS= read -r file; do
            echo "======================================"
            echo "Processing file: $file"
            if convert_file "$file"; then
              echo "✓ Successfully processed: $file"
            else
              echo "✗ Failed to process: $file"
              # Don't exit, try to process as many as possible
            fi
            echo "======================================"
          done
          
          # Check for files with spaces which might have been missed
          if [ -f /tmp/files_with_spaces.txt ]; then
            echo "Processing files with spaces..."
            while IFS= read -r file; do
              echo "======================================"
              echo "Processing file with spaces: $file"
              if convert_file "$file"; then
                echo "✓ Successfully processed file with spaces: $file"
              else
                echo "✗ Failed to process file with spaces: $file"
              fi
              echo "======================================"
            done < /tmp/files_with_spaces.txt
          fi
          
          echo "All files processed!"
          
          # Print summary statistics
          svg_count=$(find svg_files -name "*.svg" | wc -l)
          html_count=$(find html_files -name "*.html" | wc -l)
          drawio_count=$(find drawio_files -name "*.drawio" | wc -l)
          
          echo "Summary:"
          echo "  - Draw.io files: $drawio_count"
          echo "  - SVG files: $svg_count" 
          echo "  - HTML files: $html_count"
        shell: bash

      - name: Assign IDs to diagrams
        if: env.SKIP_PROCESSING != 'true'
        run: |
          echo "===== AUTO ID ASSIGNMENT ====="
          
          # Process each Draw.io file to see if it needs an ID
          for file in drawio_files/*.drawio; do
            # Skip if no files match the glob pattern
            [ -f "$file" ] || continue
            
            base_name=$(basename "$file" .drawio)
            echo "Checking file: $file"
            
            # Skip files that already have an ID
            if [[ "$base_name" =~ \(ID\ [0-9]+\) ]]; then
              echo "  ✓ Already has ID: $base_name"
              continue
            fi
            
            # Check if the file name has the pattern "X.Y Name" where X and Y are numbers
            # This indicates that it needs auto-ID assignment
            if [[ "$base_name" =~ ^([0-9]+)\.([0-9]+)\ (.*) && ! "$base_name" =~ ^[0-9]+\.[0-9]+\. ]]; then
              CATEGORY="${BASH_REMATCH[1]}"
              DETAIL="${BASH_REMATCH[2]}"
              PREFIX="${CATEGORY}.${DETAIL}"
              NAME="${BASH_REMATCH[3]}"
              
              # For debugging
              echo "✅ Found file that needs auto-ID assignment: $file"
              
              # Simple extraction
              CATEGORY=${PREFIX_PART%%.*}
              DETAIL=${PREFIX_PART#*.}
              PREFIX="$CATEGORY.$DETAIL"
              NAME="$NAME_PART"
              
              # Debug extracted parts
              echo "Extracted parts:"
              echo "  Category: '$CATEGORY'"
              echo "  Detail: '$DETAIL'"
              echo "  Prefix: '$PREFIX'"
              echo "  Name: '$NAME'"
              
              # Find highest existing ID for this prefix
              HIGHEST_ID=0
              echo "Looking for existing diagrams with prefix $PREFIX..."
              
              # Safety check to avoid expanding to literal '*' if no files match
              shopt -s nullglob
              
              # Look for files matching the pattern X.Y.Z. format with different variations
              for existing in drawio_files/*.drawio; do
                [ -f "$existing" ] || continue
                
                existing_base=$(basename "$existing" .drawio)
                
                # Check if the file matches our prefix with different numbering patterns
                if [[ "$existing_base" =~ ^${PREFIX}\.([0-9]+)\.\ (.*) ]]; then
                  # Standard pattern: X.Y.Z. Name
                  CURRENT_ID="${BASH_REMATCH[1]}"
                  echo "    Found existing diagram: $existing_base (ID: $CURRENT_ID)"
                  
                  if [[ "$CURRENT_ID" -gt "$HIGHEST_ID" ]]; then
                    HIGHEST_ID="$CURRENT_ID"
                    echo "    → New highest ID: $HIGHEST_ID"
                  fi
                elif [[ "$existing_base" =~ ^${PREFIX}\.([0-9]+)\ (.*) ]]; then
                  # Alternate pattern: X.Y.Z Name (no dot after Z)
                  CURRENT_ID="${BASH_REMATCH[1]}"
                  echo "    Found existing diagram (alternative format): $existing_base (ID: $CURRENT_ID)"
                  
                  if [[ "$CURRENT_ID" -gt "$HIGHEST_ID" ]]; then
                    HIGHEST_ID="$CURRENT_ID"
                    echo "    → New highest ID: $HIGHEST_ID"
                  fi
                fi
              done
              
              # Reset shell option
              shopt -u nullglob
              
              echo "Highest existing ID found: $HIGHEST_ID"
              
              # Handle case where no existing IDs were found - start with 1
              if [ "$HIGHEST_ID" -eq 0 ]; then
                echo "No existing IDs found, starting with ID 1"
              fi
              
              # Calculate next ID
              NEXT_ID=$((HIGHEST_ID + 1))
              echo "Next ID: $NEXT_ID"
              
              echo "Matched pattern for file needing ID: $file"
              echo "  Category: $CATEGORY"
              echo "  Detail: $DETAIL"
              echo "  Prefix: $PREFIX"
              echo "  Name: $NAME"
              
              echo "Found file with partial ID: $file"
              echo "Prefix: $PREFIX, Name: $NAME"
              
              # Find highest existing ID for this prefix
              HIGHEST_ID=0
              
              # Look for existing files with this prefix and get the highest ID
              for existing in drawio_files/*.drawio; do
                [ -f "$existing" ] || continue
                
                existing_base=$(basename "$existing" .drawio)
                # Match both formats: X.Y.Z. Name and X.Y.Z Name
                if [[ "$existing_base" =~ ^${PREFIX}\.([0-9]+)\.\ (.*) || "$existing_base" =~ ^${PREFIX}\.([0-9]+)\ (.*) ]]; then
                  CURRENT_ID="${BASH_REMATCH[1]}"
                  echo "Found existing file: $existing_base (ID: $CURRENT_ID)"
                  
                  if [ "$CURRENT_ID" -gt "$HIGHEST_ID" ]; then
                    HIGHEST_ID="$CURRENT_ID"
                  fi
                fi
              done
              
              echo "Highest ID found: $HIGHEST_ID"
              
              # Calculate next ID
              NEXT_ID=$((HIGHEST_ID + 1))
              echo "Next ID will be: $NEXT_ID"
              
              # New filenames
              NEW_DRAWIO_NAME="${PREFIX}.${NEXT_ID}. ${NAME}.drawio"
              NEW_SVG_NAME="${PREFIX}.${NEXT_ID}. ${NAME}.svg"
              NEW_HTML_NAME="${PREFIX}.${NEXT_ID}. ${NAME}.html"
              
              NEW_DRAWIO_PATH="drawio_files/${NEW_DRAWIO_NAME}"
              NEW_SVG_PATH="svg_files/${NEW_SVG_NAME}"
              NEW_HTML_PATH="html_files/${NEW_HTML_NAME}"
              
              echo "Renaming files:"
              echo "  Draw.io: $file -> $NEW_DRAWIO_PATH"
              
              # Rename the diagram files
              mv "$file" "$NEW_DRAWIO_PATH"
              
              # Check if corresponding SVG file exists
              SVG_FILE="svg_files/${base_name}.svg"
              if [ -f "$SVG_FILE" ]; then
                echo "  SVG: $SVG_FILE -> $NEW_SVG_PATH"
                mv "$SVG_FILE" "$NEW_SVG_PATH"
              fi
              
              # Check if corresponding HTML file exists
              HTML_FILE="html_files/${base_name}.html"
              if [ -f "$HTML_FILE" ]; then
                echo "  HTML: $HTML_FILE -> $NEW_HTML_PATH"
                mv "$HTML_FILE" "$NEW_HTML_PATH"
              fi
              
              # Add all files to git
              git add "$NEW_DRAWIO_PATH"
              [ -f "$NEW_SVG_PATH" ] && git add "$NEW_SVG_PATH"
              [ -f "$NEW_HTML_PATH" ] && git add "$NEW_HTML_PATH"
              
              echo "✅ Successfully assigned ID ${NEXT_ID} to diagram \"${NAME}\""
            else
              # Current file name doesn't match the pattern for auto-ID
              echo "  ✗ Not a candidate for auto-ID assignment"
            fi
          done
          
          # Process files that need simple IDs (don't have X.Y format)
          # Create ID counter file if it doesn't exist
          ID_COUNTER_FILE="drawio_files/.id_counter"
          if [ ! -f "$ID_COUNTER_FILE" ]; then
            echo "1" > "$ID_COUNTER_FILE"
            echo "Created new ID counter file"
          fi
          
          # Get current ID and increment for next use
          CURRENT_ID=$(cat "$ID_COUNTER_FILE")
          echo "Current ID counter: $CURRENT_ID"
          
          # Process each Draw.io file to see if it needs a simple ID
          for file in drawio_files/*.drawio; do
            # Skip if no files match
            [ -f "$file" ] || continue
            
            base_name=$(basename "$file" .drawio)
            
            # Skip if file already has an ID or matches X.Y pattern
            if [[ "$base_name" =~ \(ID\ [0-9]+\) || "$base_name" =~ ^[0-9]+\.[0-9]+ ]]; then
              continue
            fi
            
            # This file needs a simple ID
            echo "Processing file for simple ID: $file"
            
            # Format ID with leading zeros for display
            FORMATTED_ID=$(printf "%03d" $CURRENT_ID)
            echo "Assigning ID: $FORMATTED_ID"
            
            # Create new filenames with ID
            NEW_DRAWIO_NAME="${base_name} (ID ${FORMATTED_ID}).drawio"
            NEW_SVG_NAME="${base_name} (ID ${FORMATTED_ID}).svg"
            NEW_HTML_NAME="${base_name} (ID ${FORMATTED_ID}).html"
            
            NEW_DRAWIO_PATH="drawio_files/${NEW_DRAWIO_NAME}"
            NEW_SVG_PATH="svg_files/${NEW_SVG_NAME}"
            NEW_HTML_PATH="html_files/${NEW_HTML_NAME}"
            
            echo "Renaming files:"
            echo "  Draw.io: $file -> $NEW_DRAWIO_PATH"
            
            # Rename the files
            mv "$file" "$NEW_DRAWIO_PATH"
            
            # Check if SVG exists
            SVG_FILE="svg_files/${base_name}.svg"
            if [ -f "$SVG_FILE" ]; then
              echo "  SVG: $SVG_FILE -> $NEW_SVG_PATH"
              mv "$SVG_FILE" "$NEW_SVG_PATH"
            fi
            
            # Check if HTML exists
            HTML_FILE="html_files/${base_name}.html"
            if [ -f "$HTML_FILE" ]; then
              echo "  HTML: $HTML_FILE -> $NEW_HTML_PATH"
              mv "$HTML_FILE" "$NEW_HTML_PATH"
            fi
            
            # Add all files to git
            git add "$NEW_DRAWIO_PATH"
            [ -f "$NEW_SVG_PATH" ] && git add "$NEW_SVG_PATH"
            [ -f "$NEW_HTML_PATH" ] && git add "$NEW_HTML_PATH"
            
            echo "✅ Successfully assigned ID ${FORMATTED_ID} to diagram \"${base_name}\""
            
            # Increment for next file
            CURRENT_ID=$((CURRENT_ID + 1))
          done
          
          # Save the updated counter
          echo "$CURRENT_ID" > "$ID_COUNTER_FILE"
          echo "Saved updated ID counter: $CURRENT_ID"
          
          echo "===== AUTO ID ASSIGNMENT COMPLETE ====="
        shell: bash
        
      - name: Commit changes
        if: env.SKIP_PROCESSING != 'true'
        run: |
          # Get a list of changed files to determine what to commit
          git status --porcelain > /tmp/git_status.txt
          
          # Check if we have any changes to commit
          if grep -q "^[AM]" /tmp/git_status.txt; then
            echo "Changes detected, preparing commit..."
            
            # Count how many files are modified/added
            MODIFIED_COUNT=$(grep -c "^M" /tmp/git_status.txt || echo 0)
            ADDED_COUNT=$(grep -c "^A" /tmp/git_status.txt || echo 0)
            RENAMED_COUNT=$(grep -c "^R" /tmp/git_status.txt || echo 0)
            TOTAL_COUNT=$((MODIFIED_COUNT + ADDED_COUNT + RENAMED_COUNT))
            
            # Generate appropriate commit message
            if [ "$TOTAL_COUNT" -eq 1 ]; then
              # For a single file, be more specific
              FILE_NAME=$(grep "^[MAR]" /tmp/git_status.txt | head -1 | sed 's/^[MAR].* //')
              COMMIT_MSG="Convert diagram: ${FILE_NAME}"
            else
              # For multiple files, summarize
              COMMIT_MSG="Convert ${TOTAL_COUNT} diagrams"
            fi
            
            # Add all generated files
            git add -A svg_files/ html_files/ drawio_files/
            
            # Commit the changes
            git commit -m "${COMMIT_MSG}" || echo "No changes to commit"
            
            # Push the changes
            git push origin HEAD:${{ github.ref_name }}
            
            echo "✅ Changes committed and pushed successfully!"
          else
            echo "No changes detected, nothing to commit."
          fi
        shell: bash
        
      # Handle both modify/delete conflicts and other conflicts if a merge had conflicts
      - name: Resolve Merge Conflicts
        if: env.SKIP_PROCESSING != 'true'
        run: |
          # Check if there are any conflicts to resolve
          if git status | grep -q "both modified\|modified by"; then
            echo "Detected merge conflicts to resolve..."
            
            # Handle modify/delete conflicts
            for file in $(git status --porcelain | grep -E "DU|UD" | sed 's/^.. //'); do
              echo "Handling modify/delete conflict for $file"
              
              if git status | grep -q "deleted by us:.*$file"; then
                echo "Detected modify/delete conflict for $file (file deleted in our changes)"
                # Check if we have a renamed version (with ID) of this file
                BASE_NAME=$(basename "$file" .html)
                BASE_NAME=${BASE_NAME%.svg} # Remove .svg extension if present
                
                # Look for renamed files with ID pattern
                if find . -name "${file%.*} (ID*" 2>/dev/null | grep -q .; then
                  echo "Found renamed version with ID, accepting our deletion of the original"
                  git rm -f "$file" || true
                else
                  echo "No renamed version found, keeping the remote version"
                  git add "$file" || true
                fi
              elif git status | grep -q "deleted by them:.*$file"; then
                echo "Detected modify/delete conflict for $file (file deleted in their changes)"
                # We modified it but they deleted it - keep our version
                git add "$file"
              else
                # For standard conflicts, prefer our changes
                echo "Standard conflict for $file - preferring our version"
                git checkout --ours "$file"
                git add "$file"
              fi
            done
            
            # Commit the conflict resolution
            git commit -m "Resolve merge conflicts" || echo "No conflict resolution needed"
            git push origin HEAD:${{ github.ref_name }}
          else
            echo "No merge conflicts detected."
          fi
        shell: bash
      
      - name: Update CHANGELOG.csv
        if: env.SKIP_PROCESSING != 'true'
        run: |
          # Create or update the CHANGELOG.csv file
          CHANGELOG="html_files/CHANGELOG.csv"
          
          # Create the file with headers if it doesn't exist
          if [ ! -f "$CHANGELOG" ]; then
            echo "Creating new CHANGELOG.csv file"
            echo "Date,Time,User,Diagram,Action,File,Commit Message,Version,Commit Hash,ID" > "$CHANGELOG"
          fi
          
          # Get changed .drawio files
          git diff --name-only HEAD^ HEAD | grep "\.drawio$" > /tmp/changed_drawio.txt || true
          
          # Check if we have changes
          if [ ! -s /tmp/changed_drawio.txt ]; then
            echo "No .drawio files changed in this commit. Skipping changelog update."
            exit 0
          fi
          
          # Get commit info
          COMMIT_HASH=$(git log -1 --format=%h)
          COMMIT_MSG=$(git log -1 --format=%B | head -1 | sed 's/"/\\"/g')
          CURRENT_DATE=$(date +"%d.%m.%Y")
          CURRENT_TIME=$(date +"%H:%M:%S")
          
          # For each changed file, add an entry
          while IFS= read -r file; do
            # Skip non-existent files
            [ -f "$file" ] || continue
            
            base_name=$(basename "$file" .drawio)
            
            # Determine action based on git history
            if git log -1 --pretty=format:%H --follow -- "$file" | grep -q "$COMMIT_HASH"; then
              # If modified in this commit
              ACTION="Modified (Update)"
              
              # Check if this is a new file by looking further back
              if [ "$(git log --format=%H --follow -- "$file" | wc -l)" -eq 1 ]; then
                ACTION="New"
              fi
            else
              # Default to Modified
              ACTION="Modified (Update)"
            fi
            
            # Extract ID from filename if present
            FILE_ID=""
            if [[ "$base_name" =~ \(ID\ ([0-9]+)\)$ ]]; then
              FILE_ID="${BASH_REMATCH[1]}"
            elif [[ "$base_name" =~ ^[0-9]+\.[0-9]+\.([0-9]+) ]]; then
              FILE_ID="${BASH_REMATCH[1]}"
            fi
            
            # Add entry to changelog
            echo "${CURRENT_DATE},${CURRENT_TIME},GitHub Action,\"$base_name\",\"$ACTION\",\"$file\",\"$COMMIT_MSG\",\"1.0\",\"$COMMIT_HASH\",\"$FILE_ID\"" >> "$CHANGELOG"
            echo "Added changelog entry for $base_name"
          done < /tmp/changed_drawio.txt
          
          # Commit the changelog
          git add "$CHANGELOG"
          git commit -m "Update CHANGELOG.csv" || echo "No changes to commit for changelog"
          git push origin HEAD:${{ github.ref_name }}
          
          echo "✅ CHANGELOG.csv updated successfully"
        shell: bash

      # Look for files with spaces that might need special handling
      - name: Process Files With Spaces
        if: env.SKIP_PROCESSING != 'true'
        run: |
          # Check if we have files with spaces that need special handling
          if [ -s /tmp/files_with_spaces.txt ]; then
            echo "Processing files with spaces that might need special handling..."
            
            # Simple delay to ensure other operations have completed
            sleep 2
            
            while IFS= read -r file; do
              echo "Checking file with spaces: $file"
              
              # Check if the file exists after all other operations
              if [ ! -f "$file" ]; then
                echo "File no longer exists, likely renamed during processing: $file"
                continue
              fi
              
              # If the file still exists, make sure it's added to git
              git add "$file" || true
              
              # Check for corresponding output files
              base_name=$(basename "$file" .drawio)
              svg_file="svg_files/${base_name}.svg"
              html_file="html_files/${base_name}.html"
              
              [ -f "$svg_file" ] && git add "$svg_file" || true
              [ -f "$html_file" ] && git add "$html_file" || true
              
              echo "Handled: $file"
            done < /tmp/files_with_spaces.txt
            
            # Commit any remaining changes
            git commit -m "Handle files with spaces" || echo "No changes to commit for files with spaces"
            git push origin HEAD:${{ github.ref_name }}
          else
            echo "No files with spaces that need special handling."
          fi
        shell: bash
