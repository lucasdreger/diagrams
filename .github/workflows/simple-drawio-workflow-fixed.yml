name: Simple Drawio Workflow

on:
  push:
    branches: [main]
    paths:
      - 'drawio_files/**/*.drawio'
      - '.github/workflows/simple-drawio-workflow.yml'
  workflow_dispatch:
    inputs:
      debug_enabled:
        type: boolean
        description: 'Run with debugging enabled'
        required: false
        default: false

jobs:
  convert-diagrams:
    name: Convert Draw.io files
    runs-on: ubuntu-latest
    permissions:
      contents: write

    steps:
      - name: Checkout Repository
        uses: actions/checkout@v3
        with:
          fetch-depth: 0 # Full clone for better conflict resolution
          
      - name: Set up Git User
        run: |
          git config --global user.name "GitHub Action"
          git config --global user.email "action@github.com"
          
      - name: Extract changed .drawio files
        run: |
          echo "Extracting changed .drawio files from commit..."
          
          # Get list of all changed files
          git diff --name-only HEAD^ HEAD > /tmp/all_changed_files.txt
          
          # Filter for only .drawio files
          grep "\.drawio$" /tmp/all_changed_files.txt > /tmp/changed_files.txt || true
          
          # Check if we have any .drawio files that changed
          if [ ! -s /tmp/changed_files.txt ]; then
            echo "No .drawio files changed in this commit, using all files..."
            
            # Get all .drawio files
            find drawio_files -name "*.drawio" > /tmp/changed_files.txt || true
          fi
          
          # Files with spaces need special handling
          if [ -s /tmp/changed_files.txt ]; then
            while IFS= read -r file; do
              if [[ "$file" == *" "* ]]; then
                echo "Found changed file with spaces: $file"
                echo "$file" >> /tmp/files_with_spaces.txt
              fi
            done < /tmp/changed_files.txt
          fi
        shell: bash

      - name: Set up Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '16'
          
      - name: Set up Display
        run: |
          # Set up a virtual display for headless draw.io
          sudo apt-get update
          sudo apt-get install -y xvfb
          
          # Start Xvfb
          Xvfb :99 -screen 0 1280x1024x24 -nolisten tcp -nolisten unix &
          export DISPLAY=:99
          
          # Verify display is working
          echo "DISPLAY=$DISPLAY"
          
          # Install dependencies for electron
          sudo apt-get install -y libxshmfence1 libgbm1 libasound2
          
      - name: Install draw.io CLI
        run: |
          # Install draw.io-cli
          npm install -g draw.io-cli
          
      - name: Process Changed Files
        run: |
          # Create output directories if they don't exist
          mkdir -p svg_files html_files
          
          # Debug info
          if [ "${{ inputs.debug_enabled }}" = "true" ]; then
            echo "Debug mode enabled"
            echo "Current directory: $(pwd)"
            echo "Files in drawio_files:"
            ls -la drawio_files/
          fi
          
          # Process each changed file
          if [ -s /tmp/changed_files.txt ]; then
            while IFS= read -r file; do
              echo "Processing: $file"
              
              # Get the base filename without extension
              base_name=$(basename "$file" .drawio)
              
              # Convert to SVG using draw.io-cli
              echo "Converting to SVG..."
              xvfb-run --server-args="-screen 0 1280x1024x24" \
                draw.io-cli --export --format svg --output "svg_files/${base_name}.svg" "$file"
              
              # Convert to HTML
              echo "Converting to HTML..."
              xvfb-run --server-args="-screen 0 1280x1024x24" \
                draw.io-cli --export --format html --output "html_files/${base_name}.html" "$file"
              
              echo "Processed: $file"
            done < /tmp/changed_files.txt
          else
            echo "No files to process"
          fi
        shell: bash

      - name: Assign IDs to files
        run: |
          echo "Starting ID assignment process..."
          
          # Create ID counter file if it doesn't exist
          ID_FILE="drawio_files/.id_counter"
          if [ ! -f "$ID_FILE" ]; then
            echo "1" > "$ID_FILE"
            echo "Created new ID counter file"
          fi
          
          # Get the current ID and increment it
          CURRENT_ID=$(cat "$ID_FILE" 2>/dev/null || echo "1")
          echo "Current ID counter is: $CURRENT_ID"
          
          NEXT_ID=$((CURRENT_ID + 1))
          echo "Next ID will be: $NEXT_ID"
          
          # Save the next ID for future use
          echo "$NEXT_ID" > "$ID_FILE"
          
          # Format the ID with leading zeros
          FORMATTED_ID=$(printf "%03d" $CURRENT_ID)
          echo "Formatted ID for this file: $FORMATTED_ID"
          
          # Process files from the changed files list
          if [ -s /tmp/changed_files.txt ]; then
            while IFS= read -r file; do
              # Skip if the file doesn't exist
              [ -f "$file" ] || continue
              
              # Get base name and directory
              DIR=$(dirname "$file")
              BASE=$(basename "$file" .drawio)
              
              # Skip if it already has an ID
              if [[ "$BASE" =~ \(ID\ [0-9]+\)$ ]]; then
                echo "File already has an ID: $file"
                continue
              fi
              
              # New name with ID added
              NEW_NAME="${BASE} (ID ${FORMATTED_ID}).drawio"
              NEW_PATH="${DIR}/${NEW_NAME}"
              
              # Do the rename for drawio file
              echo "Renaming drawio file:"
              echo "  From: $file"
              echo "  To:   $NEW_PATH"
              mv "$file" "$NEW_PATH"
              
              # Also rename SVG file if it exists
              SVG_PATH="svg_files/${BASE}.svg"
              if [ -f "$SVG_PATH" ]; then
                NEW_SVG_NAME="${BASE} (ID ${FORMATTED_ID}).svg"
                NEW_SVG_PATH="svg_files/${NEW_SVG_NAME}"
                echo "Renaming SVG file:"
                echo "  From: $SVG_PATH"
                echo "  To:   $NEW_SVG_PATH"
                mv "$SVG_PATH" "$NEW_SVG_PATH"
              fi
              
              # Also rename HTML file if it exists
              HTML_PATH="html_files/${BASE}.html"
              if [ -f "$HTML_PATH" ]; then
                NEW_HTML_NAME="${BASE} (ID ${FORMATTED_ID}).html"
                NEW_HTML_PATH="html_files/${NEW_HTML_NAME}"
                echo "Renaming HTML file:"
                echo "  From: $HTML_PATH"
                echo "  To:   $NEW_HTML_PATH"
                mv "$HTML_PATH" "$NEW_HTML_PATH"
              fi
              
              echo "✅ Successfully added ID ${FORMATTED_ID} to ${BASE}"
              
              # Add to git
              git add "$NEW_PATH"
              [ -f "$NEW_SVG_PATH" ] && git add "$NEW_SVG_PATH"
              [ -f "$NEW_HTML_PATH" ] && git add "$NEW_HTML_PATH"
              
            done < /tmp/changed_files.txt
          else
            echo "No files to process for ID assignment"
          fi
        shell: bash

      - name: Commit and Push Changes
        run: |
          # Check if we have any changes to commit
          if git status --porcelain | grep -q .; then
            echo "Changes detected, committing..."
            
            # Count how many files changed
            CHANGED_FILES=$(git status --porcelain | wc -l)
            
            # Create appropriate commit message
            if [ "$CHANGED_FILES" -eq 1 ]; then
              CHANGED_FILE=$(git status --porcelain | head -1 | sed 's/^[^ ]* *//')
              git commit -m "Processed diagram: $CHANGED_FILE"
            else
              git commit -m "Processed $CHANGED_FILES diagrams"
            fi
            
            # Push the changes
            git push
            
            echo "✅ Changes committed and pushed!"
          else
            echo "No changes to commit"
          fi
        shell: bash
        
      # Handle conflicts (especially modify/delete conflicts)
      - name: Resolve Conflicts
        run: |
          # Check if there are any conflicts to resolve
          if git status | grep -q "both modified\|modified by"; then
            echo "Detected conflicts to resolve..."
            
            # Handle modify/delete conflicts
            for file in $(git status --porcelain | grep -E "DU|UD" | sed 's/^.. //'); do
              echo "Handling modify/delete conflict for $file"
              
              if git status | grep -q "deleted by us:.*$file"; then
                echo "Detected modify/delete conflict for $file (file deleted in our changes)"
                # Check if we have a renamed version (with ID) of this file
                BASE_NAME=$(basename "$file" .html)
                BASE_NAME=${BASE_NAME%.svg} # Remove .svg extension if present
                
                # Look for renamed files with ID pattern                      if find . -name "${file%.*} (ID*" 2>/dev/null | grep -q .; then
                  echo "Found renamed version with ID, accepting our deletion of the original"
                  git rm -f "$file" || true
                else
                  echo "No renamed version found, keeping the remote version"
                  git add "$file" || true
                fi
              elif git status | grep -q "deleted by them:.*$file"; then
                echo "Detected modify/delete conflict for $file (file deleted in their changes)"
                # We modified it but they deleted it - keep our version
                git add "$file"
              fi
            done
            
            # Commit the conflict resolution
            git commit -m "Resolve conflicts" || echo "No changes to commit"
            git push
          else
            echo "No conflicts detected"
          fi
        shell: bash
